<!doctype html>
<html lang="en">
<head>
    <title>Experimenting pushstate to boost page loading</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="alternate" type="application/rss+xml" title="Sadraskol's blog" href="https://sadraskol.com/feed">
    <style>
        fieldset {
            border: 0;
            padding: 0;
            margin: 0;
        }

        a {
            color: hsl(345.52, 100.0%, 77.25%);
            text-decoration: none
        }

        a:hover {
            text-decoration: underline;
            cursor: pointer
        }

        img {
            max-width: 100%;
        }

        body {
            margin: 0 0 0 0;
            font-family: "Helvetica Neue", "Helvetica", "Arial", sans-serif;
            background-color: hsl(22.11, 65.52%, 94.31%);
            color: hsl(344.0, 9.2%, 31.96%)
        }

        strong {
            color: hsl(345.0, 13.33%, 17.65%)
        }

        header {
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            color: hsl(345.0, 13.33%, 17.65%)
        }

        header nav {
            padding-top: 1.0em;
            padding-bottom: 1.0em
        }

        .container {
            max-width: 900px;
            margin: 0 auto 0 auto;
            padding: 0 1em 0 1em;
        }

        figure img {
            display: block;
            margin: 0 auto 0.5em auto;
        }

        figure figcaption {
            text-align: center;
        }

        code {
            background-color: #fffffe;
        }

        pre code {
            background-color: #fffffe;
            overflow-x: auto;
            padding: 0.5em 0.5em 0.5em 0.5em;
            display: block;
        }

        blockquote {
            margin: 0 0 0 0;
            padding: 0.5em 1.5em 0.5em 3em;
            position: relative;
        }

        blockquote::before {
            content: "\201C";
            color: hsl(345.52, 100.0%, 77.25%);
            position: absolute;
            left: 0;
            font-size: 100px;
            line-height: 1;
        }

        .post-item {
            margin: 1.0em 0 0 0
        }

        .post-item:last-child {
            margin-bottom: 1.0em
        }

        .post-item__actions {
            display: flex;
            flex-direction: row;
            margin: 0 0 0 0;
            padding: 3.0px 0 0 0;
            list-style-type: none
        }

        .post-item__actions__item {
            position: relative;
            display: block;
            padding: 0 30.0px 0 0
        }

        .index-item {
            display: flex;
            margin: 1.0em 0 0 0;
        }
        .index-item:last-child {
            margin-bottom: 1.0em
        }
        .index-item_datetime {
            position: relative;
            display: block;
            padding: 0 30.0px 0 0;
            flex-basis: 8em;
            flex-shrink: 0;
        }

        .post-item__actions__item form button {
            background: none !important;
            border: none;
            padding: 0 !important;
            text-decoration: none;
            font: inherit;
            color: hsl(345.52, 100.0%, 77.25%);
        }

        .post-item__actions__item form button:hover {
            text-decoration: underline;
            cursor: pointer
        }

        #editor-content__textarea {
            width: 100%;
            height: 400px;
            padding: 1em;
            margin-bottom: 1em;
            display: block;
            resize: vertical;
        }

        .back-link {
            display: block;
            margin-bottom: 1em;
        }

        table th {
          text-align: center;
          padding: 8px 8px;
        }
        
        table td {
          text-align: center;
          padding: 8px 8px;
        }
        
        table tr {
          border-bottom: solid 1px #aaa;
        }

        table {
          border-collapse: collapse;
        }

        /* Github gist style from highlight js */
        .h-comment,
        .h-meta {
            color: #969896
        }

        .h-variable,
        .h-template-variable,
        .h-strong,
        .h-emphasis,
        .h-quote {
            color: #df5000
        }

        .h-keyword,
        .h-selector-tag,
        .h-type {
            color: #d73a49
        }

        .h-literal,
        .h-symbol,
        .h-bullet,
        .h-attribute {
            color: #0086b3
        }

        .h-section,
        .h-name {
            color: #63a35c
        }

        .h-tag {
            color: #333333
        }

        .h-title,
        .h-attr,
        .h-selector-id,
        .h-selector-class,
        .h-selector-attr,
        .h-selector-pseudo {
            color: #6f42c1
        }

        .h-addition {
            color: #55a532;
            background-color: #eaffea
        }

        .h-deletion {
            color: #bd2c00;
            background-color: #ffecec
        }

        .h-number {
            color: #005cc5
        }

        .h-string {
            color: #032f62
        }
    </style>
</head>
<body>
<div>
    <header class="container">
        <h1><a href="/">Sadraskol</a></h1>
    </header>
    <div class="container">
        
<h2>Experimenting pushstate to boost page loading</h2>
<time>21 December 2016</time>
<p>After some nice surfing on <a href="https://dev.to">dev.to</a>, i realized the loading of articles was blazing fast. After a little investigation, i found out they're using <a href="http://instantclick.io">instantClick</a>, a javascript library that speeds page display by loading content on <code>mouseover</code> event, once the user clicks on the link the content is displayed in a flash since it's already downloaded! Although i could have simply used the library, i wanted to experiment with the underlining concept: <code>pjax</code>, the contraction of <code>pushState</code> and <code>Ajax</code>.</p>
<p>I don't need to explain <code>Ajax</code>, but <code>pushState</code> needs a little explanation. It is the DOM api that allows you to manipulate the browser history. Simply put, you can change the url without page reloading. Most frontend frameworks like angular, vuejs or react provide router library using this api under the hood. As usual, the best documentation you can get is available at <a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API">MDN</a>.</p>
<h2>pushState: a naive approach</h2>
<p>When i first read the documentation, my first thought was <em>&quot;great! it is as simple as the <code>location</code> api&quot;</em>, and i tried without any further information. The code ended up like that:</p>
<pre><code class="language-javascript"><span class="h-keyword">const</span> link = document.getElementById(<span class="h-string">'some_link'</span>);
link.addEventListener(<span class="h-string">'click'</span>, (e) => {
  e.preventDefault();
  fetch(link.href)
  .then((response) => {
    <span class="h-comment">// modify the dom accordingly</span>
    history.pushState(<span class="h-keyword">null</span>, <span class="h-keyword">null</span>, link.href);
  });
});
</code></pre>
<p>Proud of my new toy like a child, i tested it right away and it seemed to work properly. Okay the code isn't that clean, but if it is that easy, it would not be a problem to clean it, would it? How naive was I! The problem here is if you hit the back button or run <code>history.back()</code>. The content the page will not be restored as expected, only the url...</p>
<p>What happens here? As you might have noticed, the method is not called <code>setNewUrlWithSomeModification</code>. The browser has no information on what the page content was before the url changed, <code>pushState</code> segregates content loading from url changes. In order to let us manage it, the browser will trigger a <code>popstate</code> event. In our current example with a single link, we could simply do that:</p>
<pre><code class="language-javascript"><span class="h-keyword">window</span>.addEventListener(<span class="h-string">'popstate'</span>, () => {
  <span class="h-comment">// recover original content</span>
});
</code></pre>
<p>With this, we covered a very simplified use case of <code>pjax</code>.</p>
<h2>A less naive approach</h2>
<p>The case of having a single link in your web application is highly unrealistic. Let's imagine the user would browse from <code>/blog</code> to <code>/blog/first-article</code> and finally <code>/blog/last-article</code> with the current implementation. By hitting back, the user would get to the content of <code>/blog</code>, pretty embarassing.</p>
<p>Fortunately, there's a solution to that. As you might have noticed, <code>pushState</code> takes 3 arguments. I've already showed the usage of the third one: changing the url. The first argument will save our problem. MDN defines it as follows:</p>
<blockquote>
<p><strong>state object â€”</strong> The state object is a JavaScript object which is associated with the new history entry created by pushState(). Whenever the user navigates to the new state, a popstate event is fired, and the state property of the event contains a copy of the history entry's state object.</p>
</blockquote>
<p>You can put whatever information is enough for you to recover the corresponding state. The following code could make it:</p>
<pre><code class="language-javascript"><span class="h-keyword">const</span> links = document.querySelectorAll(<span class="h-string">'a'</span>);
<span class="h-keyword">for</span> (<span class="h-keyword">let</span> link <span class="h-keyword">of</span> links) {
  link.addEventListener(<span class="h-string">'click'</span>, (e) => {
    e.preventDefault();
    fetch(link.href)
    .then((response) => {
      <span class="h-comment">// modify the dom accordingly</span>
      history.pushState({href: link.href}, <span class="h-keyword">null</span>, link.href);
    });
  });
}
<span class="h-keyword">window</span>.addEventListener(<span class="h-string">'popstate'</span>, (e) => {
  <span class="h-keyword">if</span> (e.state === <span class="h-keyword">null</span>) {
    <span class="h-comment">// recover original content</span>
  } <span class="h-keyword">else</span> {
    fetch(e.state.href)
    .then((response) => {
      <span class="h-comment">// modify the dom accordingly</span>
    });
  }
});
</code></pre>
<p>The state saved as <code>{href: link.href}</code> is recovered whenever the history comes back and <code>popstate</code> event is triggered. The code will cover the basic of history manipulation, making sure that content and history are always coherent.</p>
<h2>Why not using pushState explicitly</h2>
<p>I strongly recommend you to use <code>pjax</code> library or the routing functionalities of your framework. If you tried the above code, you will have experienced how imperfect it is: we don't save scroll in page navigation, the listener for <code>click</code> event intercept links opened in a new tab, if the content download takes time, there is no proper loading indication... However i do recommend you to try the api as it is fun and a small reminder of how frameworks make our lifes way easier!</p>
<hr />
<p><em>ps: if you want to go further, you can also implement a history cache instead of fetching the content at every changes.</em></p>

<div>
    <ul class="post-item__actions">
        <li class="post-item__actions__item"><a class="back-link" href="&#x2f;">All posts</a></li>
        <li class="post-item__actions__item"><a href="https://twitter.com/sadraskol">Twitter</a></li>
    </ul>
</div>

    </div>
</div>
</body>
</html>